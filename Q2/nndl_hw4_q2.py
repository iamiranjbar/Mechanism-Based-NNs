# -*- coding: utf-8 -*-
"""NNDL HW4 Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WFxNKrULC-tXm5Ok0Dt6iceRp1jIFKBM

# Question 2 (MaxNet)

## MaxNet class implementation
"""

class MaxNet:
  
  def __init__(self, values, epsilon):
    self.initial_values = values.copy()
    self.old_values = values.copy()
    self.values = values.copy()
    self.epsilon = epsilon
  
  def activate(self, x):
    if x >= 0:
      return x
    return 0
  
  def update(self):
    old_values_sum = sum(self.old_values)
    for index in range(len(self.values)):
      self.values[index] = self.activate(self.old_values[index] - self.epsilon * 
                                         (old_values_sum - self.old_values[index]))
    self.old_values = self.values
  
  def is_stopped(self):
    non_zero_count = sum(element !=0 for element in self.values)
    return non_zero_count == 1
  
  def print_values(self):
    print(*self.values)

  def max(self):
    for index in range(len(self.values)):
      if self.values[index] != 0:
        return self.initial_values[index]
  
  def find_max(self, verbose=False):
    if verbose:
      print("Initial values:")
      self.print_values()
    iteration_count = 0

    while not self.is_stopped():
      iteration_count += 1
      self.update()
      if verbose:
        print(f"Iteration {iteration_count} values:")
        self.print_values()
    
    return self.max()

"""## Test Network for given vector"""

x = [1.2, 1.1, 0.5, 1.5, 1.13, 0.8]
epsilon = 0.13
max_net = MaxNet(x, epsilon)

max_value = max_net.find_max(verbose=True)
print(f"Max value is: {max_value}")

"""## Find max absolute values
Using 3 max nets

### Implement MaxAbsNet class
"""

class MaxAbsNet:

  def __init__(self, values, epsilon):
    self.values = values
    self.epsilon = epsilon

  def find_max_abs(self):
    max_net_1 = MaxNet(self.values.copy(), epsilon)
    positive_max = max_net_1.find_max()

    negative_values = [-1*element for element in self.values]
    max_net_2 = MaxNet(negative_values, epsilon)
    negative_max = max_net_2.find_max()

    max_list = [positive_max, negative_max]
    max_net_3 = MaxNet(max_list, epsilon)
    return max_net_3.find_max()

"""### Test MaxAbsNet for finding max abs values in given list"""

x = [1.2, 1.1, 0.5, -1.5, 1.13, -0.8]
epsilon = 0.13

max_abs_net = MaxAbsNet(x, epsilon)
print(f"Max Absolute Value is: {max_abs_net.find_max_abs()}")